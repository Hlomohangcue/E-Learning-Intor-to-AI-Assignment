-- Update Course Content - Add Complete Lessons for All Courses
-- This script adds comprehensive lesson content for all 5 courses

USE easylearn_db;

-- Add more lessons for Course 1: Introduction to Web Development
INSERT INTO lessons (course_id, title, overview, content, order_index) VALUES
(1, 'CSS Styling and Layout', 'Master the art of styling web pages with CSS. Learn about selectors, properties, and layout techniques.', '<h3>Introduction to CSS</h3><p>CSS (Cascading Style Sheets) controls the presentation of HTML elements. It separates content from design.</p><h3>CSS Selectors</h3><div class="code-example">/* Element Selector */\nh1 {\n    color: blue;\n    font-size: 24px;\n}\n\n/* Class Selector */\n.highlight {\n    background-color: yellow;\n    padding: 10px;\n}\n\n/* ID Selector */\n#header {\n    text-align: center;\n    margin-bottom: 20px;\n}</div><h3>Box Model</h3><p>Every HTML element is a rectangular box with:<br>• <strong>Content:</strong> The actual content<br>• <strong>Padding:</strong> Space around content<br>• <strong>Border:</strong> Border around padding<br>• <strong>Margin:</strong> Space outside border</p><div class="exercise"><h4>Practice Exercise</h4><p>Create a CSS file and style your HTML page with colors, fonts, and spacing.</p></div>', 2),

(1, 'JavaScript Fundamentals', 'Learn the basics of JavaScript programming to make your web pages interactive and dynamic.', '<h3>What is JavaScript?</h3><p>JavaScript is a programming language that adds interactivity to web pages. It runs in the browser and can manipulate HTML and CSS.</p><h3>Variables and Data Types</h3><div class="code-example">// Variables\nlet name = "John";\nconst age = 25;\nvar city = "New York";\n\n// Data types\nlet text = "Hello World";     // String\nlet number = 42;              // Number\nlet isActive = true;          // Boolean\nlet items = [1, 2, 3];       // Array\nlet person = {name: "Alice"}; // Object</div><h3>Functions</h3><div class="code-example">// Function declaration\nfunction greetUser(name) {\n    return "Hello, " + name + "!";\n}\n\n// Function call\nlet message = greetUser("Alice");\nconsole.log(message);</div><div class="exercise"><h4>Practice Exercise</h4><p>Create a JavaScript function that calculates the area of a rectangle.</p></div>', 3),

(1, 'Building Your First Website', 'Combine HTML, CSS, and JavaScript to create a complete, functional website from scratch.', '<h3>Project Overview</h3><p>In this lesson, you will build a personal portfolio website that showcases your skills and projects.</p><h3>Website Structure</h3><div class="code-example">my-website/\n├── index.html\n├── styles.css\n├── script.js\n└── images/\n    └── profile.jpg</div><h3>HTML Structure</h3><div class="code-example">&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;link rel="stylesheet" href="styles.css"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;nav&gt;Navigation&lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;Content&lt;/section&gt;\n    &lt;/main&gt;\n    &lt;script src="script.js"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</div><div class="exercise"><h4>Practice Exercise</h4><p>Build a complete portfolio website with multiple sections: About, Skills, Projects, and Contact.</p></div>', 4),

(1, 'Responsive Design Principles', 'Learn how to make your websites look great on all devices using responsive design techniques.', '<h3>What is Responsive Design?</h3><p>Responsive design ensures your website looks and works well on all devices - desktop, tablet, and mobile.</p><h3>CSS Media Queries</h3><div class="code-example">/* Mobile First Approach */\n.container {\n    width: 100%;\n    padding: 10px;\n}\n\n/* Tablet */\n@media (min-width: 768px) {\n    .container {\n        width: 750px;\n        margin: 0 auto;\n    }\n}\n\n/* Desktop */\n@media (min-width: 1200px) {\n    .container {\n        width: 1140px;\n    }\n}</div><h3>Flexible Grid System</h3><p>Use CSS Flexbox and Grid for flexible layouts:<br>• <strong>Flexbox:</strong> One-dimensional layouts<br>• <strong>CSS Grid:</strong> Two-dimensional layouts</p><div class="exercise"><h4>Practice Exercise</h4><p>Make your portfolio website responsive using media queries and flexible layouts.</p></div>', 5),

(1, 'Web Development Best Practices', 'Learn industry best practices for writing clean, maintainable, and performant web code.', '<h3>Code Organization</h3><p>• Keep HTML semantic and accessible<br>• Separate content (HTML), presentation (CSS), and behavior (JS)<br>• Use meaningful class and ID names<br>• Comment your code appropriately</p><h3>Performance Optimization</h3><div class="code-example">/* Optimize CSS */\n.efficient-selector {\n    /* Use specific selectors */\n}\n\n/* Minimize HTTP requests */\n/* Compress images */\n/* Minify CSS and JavaScript */</div><h3>Accessibility</h3><p>• Use semantic HTML elements<br>• Provide alt text for images<br>• Ensure proper color contrast<br>• Make navigation keyboard accessible</p><div class="exercise"><h4>Practice Exercise</h4><p>Audit your website for accessibility and performance issues, then implement improvements.</p></div>', 6);

-- Add more lessons for Course 2: Python Programming Essentials
INSERT INTO lessons (course_id, title, overview, content, order_index) VALUES
(2, 'Control Flow and Functions', 'Master Python''s control structures like if-statements, loops, and learn to create reusable functions.', '<h3>Conditional Statements</h3><div class="code-example"># If-elif-else statements\nage = 18\n\nif age >= 18:\n    print("You are an adult")\nelif age >= 13:\n    print("You are a teenager")\nelse:\n    print("You are a child")</div><h3>Loops</h3><div class="code-example"># For loop\nfruits = ["apple", "banana", "orange"]\nfor fruit in fruits:\n    print(f"I love {fruit}")\n\n# While loop\ncount = 0\nwhile count < 5:\n    print(f"Count: {count}")\n    count += 1</div><h3>Functions</h3><div class="code-example">def calculate_area(length, width):\n    """Calculate the area of a rectangle"""\n    area = length * width\n    return area\n\n# Function call\nresult = calculate_area(10, 5)\nprint(f"Area: {result}")</div><div class="exercise"><h4>Practice Exercise</h4><p>Create a function that determines if a number is prime.</p></div>', 2),

(2, 'Data Structures and Algorithms', 'Explore Python''s built-in data structures and learn fundamental algorithms for problem-solving.', '<h3>Lists and List Methods</h3><div class="code-example"># Creating and manipulating lists\nnumbers = [1, 2, 3, 4, 5]\nnumbers.append(6)        # Add element\nnumbers.remove(3)        # Remove element\nnumbers.sort()           # Sort list\nprint(numbers[0])        # Access element\n\n# List comprehension\nsquares = [x**2 for x in range(10)]</div><h3>Dictionaries</h3><div class="code-example"># Dictionary operations\nstudent = {\n    "name": "Alice",\n    "age": 20,\n    "courses": ["Python", "Math"]\n}\n\n# Access and modify\nprint(student["name"])\nstudent["grade"] = "A"\n\n# Iterate through dictionary\nfor key, value in student.items():\n    print(f"{key}: {value}")</div><h3>Sets and Tuples</h3><p>• <strong>Sets:</strong> Unordered collections of unique elements<br>• <strong>Tuples:</strong> Immutable ordered collections</p><div class="exercise"><h4>Practice Exercise</h4><p>Implement a simple contact book using dictionaries and lists.</p></div>', 3),

(2, 'Object-Oriented Programming', 'Learn the principles of OOP in Python: classes, objects, inheritance, and encapsulation.', '<h3>Classes and Objects</h3><div class="code-example">class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n    \n    def drive(self, miles):\n        self.mileage += miles\n        print(f"Drove {miles} miles")\n    \n    def display_info(self):\n        return f"{self.year} {self.make} {self.model}"\n\n# Create objects\nmy_car = Car("Toyota", "Camry", 2020)\nmy_car.drive(100)\nprint(my_car.display_info())</div><h3>Inheritance</h3><div class="code-example">class ElectricCar(Car):\n    def __init__(self, make, model, year, battery_capacity):\n        super().__init__(make, model, year)\n        self.battery_capacity = battery_capacity\n    \n    def charge(self):\n        print("Charging the battery...")</div><div class="exercise"><h4>Practice Exercise</h4><p>Create a class hierarchy for different types of animals with shared and unique behaviors.</p></div>', 4),

(2, 'File Handling and Modules', 'Learn to work with files, create modules, and organize your Python code effectively.', '<h3>Reading and Writing Files</h3><div class="code-example"># Writing to a file\nwith open("data.txt", "w") as file:\n    file.write("Hello, World!\\n")\n    file.write("Python is awesome!")\n\n# Reading from a file\nwith open("data.txt", "r") as file:\n    content = file.read()\n    print(content)\n\n# Reading line by line\nwith open("data.txt", "r") as file:\n    for line in file:\n        print(line.strip())</div><h3>Working with CSV Files</h3><div class="code-example">import csv\n\n# Writing CSV\ndata = [["Name", "Age"], ["Alice", 25], ["Bob", 30]]\nwith open("people.csv", "w", newline="") as file:\n    writer = csv.writer(file)\n    writer.writerows(data)\n\n# Reading CSV\nwith open("people.csv", "r") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)</div><h3>Creating Modules</h3><p>Organize your code into reusable modules for better structure and maintainability.</p><div class="exercise"><h4>Practice Exercise</h4><p>Create a module for mathematical operations and import it into a main program.</p></div>', 5),

(2, 'Building Python Applications', 'Apply everything you''ve learned to build complete Python applications and projects.', '<h3>Project Planning</h3><p>Learn to break down complex problems into smaller, manageable pieces:<br>1. Define requirements<br>2. Design the structure<br>3. Implement incrementally<br>4. Test and debug<br>5. Refactor and optimize</p><h3>Error Handling</h3><div class="code-example">try:\n    number = int(input("Enter a number: "))\n    result = 10 / number\n    print(f"Result: {result}")\nexcept ValueError:\n    print("Please enter a valid number")\nexcept ZeroDivisionError:\n    print("Cannot divide by zero")\nfinally:\n    print("Operation completed")</div><h3>Sample Project: To-Do List App</h3><div class="code-example">class TodoList:\n    def __init__(self):\n        self.tasks = []\n    \n    def add_task(self, task):\n        self.tasks.append({"task": task, "done": False})\n    \n    def mark_done(self, index):\n        if 0 <= index < len(self.tasks):\n            self.tasks[index]["done"] = True\n    \n    def display_tasks(self):\n        for i, task in enumerate(self.tasks):\n            status = "✓" if task["done"] else "○"\n            print(f"{i+1}. {status} {task[''task'']}")</div><div class="exercise"><h4>Practice Exercise</h4><p>Build a complete calculator application with a user interface and error handling.</p></div>', 6);

-- Add more lessons for Course 3: Data Science with AI
INSERT INTO lessons (course_id, title, overview, content, order_index) VALUES
(3, 'Data Analysis with Pandas', 'Master the pandas library for data manipulation, cleaning, and analysis in Python.', '<h3>Introduction to Pandas</h3><p>Pandas is a powerful data manipulation library that provides data structures like DataFrame and Series.</p><h3>Creating DataFrames</h3><div class="code-example">import pandas as pd\nimport numpy as np\n\n# Create DataFrame from dictionary\ndata = {\n    "Name": ["Alice", "Bob", "Charlie"],\n    "Age": [25, 30, 35],\n    "City": ["New York", "London", "Tokyo"]\n}\ndf = pd.DataFrame(data)\n\n# Read from CSV\ndf = pd.read_csv("data.csv")\n\n# Basic operations\nprint(df.head())        # First 5 rows\nprint(df.info())        # Data info\nprint(df.describe())    # Statistical summary</div><h3>Data Cleaning</h3><div class="code-example"># Handle missing values\ndf.dropna()                    # Remove rows with NaN\ndf.fillna(0)                   # Fill NaN with 0\ndf["column"].fillna(df["column"].mean())  # Fill with mean\n\n# Remove duplicates\ndf.drop_duplicates()\n\n# Data type conversion\ndf["age"] = df["age"].astype(int)</div><div class="exercise"><h4>Practice Exercise</h4><p>Load a dataset and perform basic data cleaning and exploration tasks.</p></div>', 2),

(3, 'Data Visualization', 'Create compelling visualizations using matplotlib, seaborn, and other Python libraries.', '<h3>Matplotlib Basics</h3><div class="code-example">import matplotlib.pyplot as plt\nimport numpy as np\n\n# Line plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nplt.plot(x, y)\nplt.title("Sine Wave")\nplt.xlabel("X values")\nplt.ylabel("Y values")\nplt.show()\n\n# Bar chart\ncategories = ["A", "B", "C", "D"]\nvalues = [23, 45, 56, 78]\nplt.bar(categories, values)\nplt.title("Bar Chart Example")\nplt.show()</div><h3>Seaborn for Statistical Plots</h3><div class="code-example">import seaborn as sns\n\n# Load sample dataset\ntips = sns.load_dataset("tips")\n\n# Scatter plot\nsns.scatterplot(data=tips, x="total_bill", y="tip")\n\n# Box plot\nsns.boxplot(data=tips, x="day", y="total_bill")\n\n# Heatmap\ncorr = tips.corr()\nsns.heatmap(corr, annot=True)</div><h3>Interactive Visualizations</h3><p>Learn to create interactive plots using Plotly for web-based dashboards and presentations.</p><div class="exercise"><h4>Practice Exercise</h4><p>Create a comprehensive data visualization dashboard for a dataset of your choice.</p></div>', 3),

(3, 'Machine Learning Basics', 'Introduction to machine learning algorithms and their implementation using scikit-learn.', '<h3>Types of Machine Learning</h3><p>• <strong>Supervised Learning:</strong> Learn from labeled data<br>• <strong>Unsupervised Learning:</strong> Find patterns in unlabeled data<br>• <strong>Reinforcement Learning:</strong> Learn through interaction and rewards</p><h3>Linear Regression</h3><div class="code-example">from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Prepare data\nX = [[1], [2], [3], [4], [5]]\ny = [2, 4, 6, 8, 10]\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create and train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Evaluate\nmse = mean_squared_error(y_test, predictions)\nprint(f"Mean Squared Error: {mse}")</div><h3>Classification</h3><div class="code-example">from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n# Generate sample data\nX, y = make_classification(n_samples=1000, n_features=4)\n\n# Train classifier\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Accuracy\naccuracy = clf.score(X_test, y_test)\nprint(f"Accuracy: {accuracy}")</div><div class="exercise"><h4>Practice Exercise</h4><p>Build a classification model to predict customer churn using a real dataset.</p></div>', 4),

(3, 'Deep Learning Fundamentals', 'Explore neural networks and deep learning using TensorFlow and Keras.', '<h3>Neural Network Basics</h3><p>Neural networks are inspired by the human brain and consist of interconnected nodes (neurons) that process information.</p><h3>Building Your First Neural Network</h3><div class="code-example">import tensorflow as tf\nfrom tensorflow import keras\n\n# Create a simple neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation="relu", input_shape=(784,)),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(10, activation="softmax")\n])\n\n# Compile model\nmodel.compile(optimizer="adam",\n              loss="sparse_categorical_crossentropy",\n              metrics=["accuracy"])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10, validation_split=0.1)</div><h3>Convolutional Neural Networks</h3><div class="code-example"># CNN for image classification\nmodel = keras.Sequential([\n    keras.layers.Conv2D(32, (3, 3), activation="relu", input_shape=(28, 28, 1)),\n    keras.layers.MaxPooling2D((2, 2)),\n    keras.layers.Conv2D(64, (3, 3), activation="relu"),\n    keras.layers.MaxPooling2D((2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(64, activation="relu"),\n    keras.layers.Dense(10, activation="softmax")\n])</div><h3>Applications</h3><p>• Image recognition and computer vision<br>• Natural language processing<br>• Speech recognition<br>• Recommendation systems</p><div class="exercise"><h4>Practice Exercise</h4><p>Build a CNN to classify handwritten digits using the MNIST dataset.</p></div>', 5),

(3, 'AI Project Implementation', 'Apply your knowledge to build a complete AI project from data collection to deployment.', '<h3>Project Lifecycle</h3><p>1. <strong>Problem Definition:</strong> Clearly define the AI problem<br>2. <strong>Data Collection:</strong> Gather and prepare datasets<br>3. <strong>Data Preprocessing:</strong> Clean and transform data<br>4. <strong>Model Selection:</strong> Choose appropriate algorithms<br>5. <strong>Training:</strong> Train and tune models<br>6. <strong>Evaluation:</strong> Test model performance<br>7. <strong>Deployment:</strong> Deploy to production</p><h3>Model Deployment</h3><div class="code-example"># Save trained model\nmodel.save("my_model.h5")\n\n# Load and use model\nloaded_model = keras.models.load_model("my_model.h5")\npredictions = loaded_model.predict(new_data)\n\n# Deploy with Flask\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route("/predict", methods=["POST"])\ndef predict():\n    data = request.json\n    prediction = model.predict(data)\n    return jsonify({"prediction": prediction.tolist()})</div><h3>Ethics in AI</h3><p>• Bias and fairness in algorithms<br>• Privacy and data protection<br>• Transparency and explainability<br>• Social impact considerations</p><div class="exercise"><h4>Practice Exercise</h4><p>Build and deploy a complete AI application that solves a real-world problem.</p></div>', 6);

-- Add more lessons for Course 4: Mobile App Development
INSERT INTO lessons (course_id, title, overview, content, order_index) VALUES
(4, 'React Native Basics', 'Learn the fundamentals of React Native for cross-platform mobile app development.', '<h3>Setting Up React Native</h3><div class="code-example"># Install React Native CLI\nnpm install -g @react-native-community/cli\n\n# Create new project\nnpx react-native init MyAwesomeApp\n\n# Run on iOS\nnpx react-native run-ios\n\n# Run on Android\nnpx react-native run-android</div><h3>Core Components</h3><div class="code-example">import React from "react";\nimport { View, Text, StyleSheet, TouchableOpacity } from "react-native";\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Hello, React Native!</Text>\n      <TouchableOpacity style={styles.button}>\n        <Text style={styles.buttonText}>Press Me</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: "bold",\n    marginBottom: 20,\n  },\n  button: {\n    backgroundColor: "#007AFF",\n    padding: 15,\n    borderRadius: 8,\n  },\n  buttonText: {\n    color: "white",\n    fontSize: 16,\n  },\n});</div><div class="exercise"><h4>Practice Exercise</h4><p>Create a simple "Hello World" app with interactive buttons and text displays.</p></div>', 2),

(4, 'UI/UX Design for Mobile', 'Master mobile interface design principles and create beautiful, user-friendly app interfaces.', '<h3>Mobile Design Principles</h3><p>• <strong>Touch-friendly:</strong> Design for finger navigation<br>• <strong>Simplicity:</strong> Keep interfaces clean and focused<br>• <strong>Consistency:</strong> Follow platform guidelines<br>• <strong>Performance:</strong> Optimize for speed and responsiveness</p><h3>Styling in React Native</h3><div class="code-example">const styles = StyleSheet.create({\n  // Flexbox layout\n  container: {\n    flex: 1,\n    flexDirection: "column",\n    justifyContent: "space-between",\n  },\n  \n  // Card design\n  card: {\n    backgroundColor: "white",\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: "#000",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  \n  // Typography\n  heading: {\n    fontSize: 24,\n    fontWeight: "600",\n    color: "#333",\n  },\n});</div><h3>Platform-Specific Design</h3><p>• <strong>iOS:</strong> Follow Human Interface Guidelines<br>• <strong>Android:</strong> Follow Material Design principles</p><div class="exercise"><h4>Practice Exercise</h4><p>Design and implement a mobile app interface for a weather application.</p></div>', 3),

(4, 'Navigation and State Management', 'Learn to implement navigation between screens and manage application state effectively.', '<h3>React Navigation</h3><div class="code-example">import { NavigationContainer } from "@react-navigation/native";\nimport { createStackNavigator } from "@react-navigation/stack";\nimport { createBottomTabNavigator } from "@react-navigation/bottom-tabs";\n\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\n\n// Stack Navigation\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName="Home">\n        <Stack.Screen name="Home" component={HomeScreen} />\n        <Stack.Screen name="Details" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n// Navigate between screens\nconst HomeScreen = ({ navigation }) => {\n  return (\n    <TouchableOpacity\n      onPress={() => navigation.navigate("Details")}\n    >\n      <Text>Go to Details</Text>\n    </TouchableOpacity>\n  );\n};</div><h3>State Management with Context</h3><div class="code-example">import React, { createContext, useContext, useReducer } from "react";\n\n// Create context\nconst AppContext = createContext();\n\n// State management\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case "SET_USER":\n      return { ...state, user: action.payload };\n    case "ADD_ITEM":\n      return { ...state, items: [...state.items, action.payload] };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nconst AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  \n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};</div><div class="exercise"><h4>Practice Exercise</h4><p>Build a multi-screen app with tab navigation and shared state between screens.</p></div>', 4),

(4, 'API Integration', 'Learn to connect your mobile app to backend services and handle data synchronization.', '<h3>Making API Calls</h3><div class="code-example">import { useState, useEffect } from "react";\n\nconst DataScreen = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch("https://api.example.com/data");\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) return <Text>Loading...</Text>;\n  if (error) return <Text>Error: {error}</Text>;\n\n  return (\n    <FlatList\n      data={data}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n      keyExtractor={item => item.id.toString()}\n    />\n  );\n};</div><h3>Handling Authentication</h3><div class="code-example">// Login function\nconst login = async (email, password) => {\n  const response = await fetch("https://api.example.com/auth/login", {\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n    },\n    body: JSON.stringify({ email, password }),\n  });\n  \n  const data = await response.json();\n  \n  if (data.token) {\n    // Store token securely\n    await AsyncStorage.setItem("authToken", data.token);\n    return data;\n  }\n  \n  throw new Error("Login failed");\n};</div><div class="exercise"><h4>Practice Exercise</h4><p>Integrate your app with a REST API to display and manage user data.</p></div>', 5),

(4, 'Publishing Your App', 'Learn the process of preparing, building, and publishing your mobile app to app stores.', '<h3>Preparing for Release</h3><p>1. <strong>Testing:</strong> Thorough testing on multiple devices<br>2. <strong>Performance:</strong> Optimize app performance<br>3. <strong>Security:</strong> Implement security best practices<br>4. <strong>Assets:</strong> Prepare app icons and screenshots<br>5. <strong>Metadata:</strong> Write app descriptions and keywords</p><h3>Building for Production</h3><div class="code-example"># Android build\ncd android\n./gradlew assembleRelease\n\n# iOS build (requires Xcode)\n# Open ios/YourApp.xcworkspace in Xcode\n# Select "Any iOS Device" target\n# Product → Archive\n\n# Generate signed APK\ncd android\n./gradlew bundleRelease</div><h3>App Store Guidelines</h3><p>• <strong>Apple App Store:</strong> Human Interface Guidelines compliance<br>• <strong>Google Play Store:</strong> Material Design and policy compliance<br>• <strong>Content Policy:</strong> Appropriate content and functionality<br>• <strong>Privacy:</strong> Clear privacy policy and data handling</p><h3>App Store Optimization (ASO)</h3><p>• Compelling app title and description<br>• High-quality screenshots and videos<br>• Relevant keywords for discoverability<br>• Regular updates and bug fixes</p><div class="exercise"><h4>Practice Exercise</h4><p>Prepare your app for publication by creating all necessary assets and metadata.</p></div>', 6);

-- Add more lessons for Course 5: Digital Marketing Fundamentals
INSERT INTO lessons (course_id, title, overview, content, order_index) VALUES
(5, 'Search Engine Optimization (SEO)', 'Master the art of optimizing websites to rank higher in search engine results and drive organic traffic.', '<h3>SEO Fundamentals</h3><p>SEO is the practice of optimizing your website to increase visibility in search engine results pages (SERPs).</p><h3>On-Page SEO</h3><div class="code-example"><!-- Optimized HTML structure -->\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <title>Best Pizza in New York | Tony''s Pizzeria</title>\n    <meta name="description" content="Authentic Italian pizza made fresh daily. Order online for delivery in NYC.">\n    <meta name="keywords" content="pizza, Italian food, NYC, delivery">\n</head>\n<body>\n    <h1>Best Pizza in New York City</h1>\n    <h2>Our Signature Pizzas</h2>\n    <p>Experience authentic Italian flavors...</p>\n</body>\n</html></div><h3>Keyword Research</h3><p>• Use tools like Google Keyword Planner<br>• Focus on long-tail keywords<br>• Analyze competitor keywords<br>• Consider search intent</p><h3>Technical SEO</h3><p>• Page loading speed optimization<br>• Mobile-friendly design<br>• SSL certificates<br>• XML sitemaps<br>• Proper URL structure</p><div class="exercise"><h4>Practice Exercise</h4><p>Conduct keyword research for a local business and optimize their homepage for SEO.</p></div>', 2),

(5, 'Social Media Marketing', 'Learn to leverage social media platforms to build brand awareness, engage audiences, and drive conversions.', '<h3>Platform-Specific Strategies</h3><p>• <strong>Facebook:</strong> Community building and detailed targeting<br>• <strong>Instagram:</strong> Visual storytelling and influencer partnerships<br>• <strong>Twitter:</strong> Real-time engagement and customer service<br>• <strong>LinkedIn:</strong> B2B networking and thought leadership<br>• <strong>TikTok:</strong> Creative video content and viral marketing</p><h3>Content Calendar Planning</h3><div class="code-example">Social Media Content Calendar - Week 1\n\nMonday:\n- Facebook: Motivational quote + product highlight\n- Instagram: Behind-the-scenes story\n- Twitter: Industry news share with commentary\n\nTuesday:\n- Instagram: User-generated content repost\n- LinkedIn: Thought leadership article\n- Facebook: Tutorial video\n\nWednesday:\n- Instagram: Product showcase\n- Twitter: Quick tip thread\n- Facebook: Customer testimonial</div><h3>Engagement Strategies</h3><p>• Respond to comments promptly<br>• Ask questions to encourage interaction<br>• Share user-generated content<br>• Host live sessions and Q&As<br>• Use relevant hashtags strategically</p><h3>Social Media Advertising</h3><p>• Targeted ad campaigns<br>• A/B testing ad creatives<br>• Retargeting website visitors<br>• Lookalike audiences<br>• Campaign optimization</p><div class="exercise"><h4>Practice Exercise</h4><p>Create a month-long social media content calendar for a brand of your choice.</p></div>', 3),

(5, 'Email Marketing Campaigns', 'Master email marketing to nurture leads, retain customers, and drive sales through effective email campaigns.', '<h3>Email Marketing Strategy</h3><p>Email marketing remains one of the highest ROI marketing channels when executed properly.</p><h3>Building Email Lists</h3><div class="code-example"><!-- Lead magnet signup form -->\n<div class="email-signup">\n    <h3>Get Our Free Marketing Guide</h3>\n    <p>Learn 10 proven strategies to grow your business</p>\n    <form>\n        <input type="email" placeholder="Enter your email" required>\n        <input type="text" placeholder="First Name" required>\n        <button type="submit">Download Free Guide</button>\n    </form>\n    <p><small>We respect your privacy. Unsubscribe at any time.</small></p>\n</div></div><h3>Email Campaign Types</h3><p>• <strong>Welcome Series:</strong> Onboard new subscribers<br>• <strong>Newsletter:</strong> Regular valuable content<br>• <strong>Promotional:</strong> Product launches and sales<br>• <strong>Abandoned Cart:</strong> Recover lost sales<br>• <strong>Re-engagement:</strong> Win back inactive subscribers</p><h3>Email Design Best Practices</h3><p>• Mobile-responsive design<br>• Clear call-to-action buttons<br>• Compelling subject lines<br>• Personalization and segmentation<br>• A/B testing elements</p><h3>Automation Workflows</h3><div class="code-example">Welcome Email Series Workflow:\n\nDay 0: Welcome + immediate value\nDay 1: Company story and mission\nDay 3: Most popular products/content\nDay 7: Customer success stories\nDay 14: Special offer for new subscribers\nDay 21: Feedback request and social media</div><div class="exercise"><h4>Practice Exercise</h4><p>Design and write a complete welcome email series for an e-commerce business.</p></div>', 4),

(5, 'Pay-Per-Click Advertising', 'Learn to create and optimize PPC campaigns across Google Ads, Facebook Ads, and other platforms.', '<h3>Google Ads Fundamentals</h3><p>PPC advertising allows you to place ads in search results and pay only when someone clicks your ad.</p><h3>Campaign Structure</h3><div class="code-example">Google Ads Account Structure:\n\nAccount\n├── Campaign 1: Brand Keywords\n│   ├── Ad Group 1: Brand + Product\n│   ├── Ad Group 2: Brand + Service\n│   └── Ad Group 3: Competitor Comparisons\n├── Campaign 2: Product Categories\n│   ├── Ad Group 1: Category A Keywords\n│   ├── Ad Group 2: Category B Keywords\n│   └── Ad Group 3: Category C Keywords\n└── Campaign 3: Remarketing\n    ├── Ad Group 1: Website Visitors\n    └── Ad Group 2: Past Customers</div><h3>Keyword Match Types</h3><p>• <strong>Broad Match:</strong> +running +shoes<br>• <strong>Phrase Match:</strong> "running shoes"<br>• <strong>Exact Match:</strong> [running shoes]<br>• <strong>Negative Keywords:</strong> -free, -cheap</p><h3>Ad Copy Best Practices</h3><div class="code-example">Effective Ad Copy Structure:\n\nHeadline 1: Include main keyword\nHeadline 2: Unique selling proposition\nHeadline 3: Call to action\nDescription 1: Benefits and features\nDescription 2: Social proof or offer\n\nExample:\nHeadline 1: Premium Running Shoes\nHeadline 2: Free Shipping & 30-Day Returns\nHeadline 3: Shop Now & Save 20%\nDescription 1: Discover our collection of high-performance running shoes designed for comfort and durability.\nDescription 2: Join thousands of satisfied customers. Limited time offer!</div><h3>Bid Management</h3><p>• Manual vs. automated bidding<br>• Target CPA (Cost Per Acquisition)<br>• Target ROAS (Return on Ad Spend)<br>• Bid adjustments by device, location, time</p><div class="exercise"><h4>Practice Exercise</h4><p>Create a complete Google Ads campaign structure for a local fitness gym.</p></div>', 5),

(5, 'Analytics and Performance Tracking', 'Master digital marketing analytics to measure, analyze, and optimize your marketing performance.', '<h3>Google Analytics Setup</h3><div class="code-example"><!-- Google Analytics 4 Implementation -->\n<script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag(''js'', new Date());\n  gtag(''config'', ''GA_MEASUREMENT_ID'');\n</script>\n\n<!-- Custom Event Tracking -->\n<script>\ngtag(''event'', ''purchase'', {\n  currency: ''USD'',\n  value: 25.99,\n  transaction_id: ''T12345''\n});\n</script></div><h3>Key Performance Indicators (KPIs)</h3><p>• <strong>Traffic Metrics:</strong> Sessions, users, pageviews<br>• <strong>Engagement:</strong> Bounce rate, session duration, pages per session<br>• <strong>Conversion:</strong> Conversion rate, revenue, goal completions<br>• <strong>Acquisition:</strong> Traffic sources, cost per acquisition<br>• <strong>Retention:</strong> Return visitors, customer lifetime value</p><h3>Creating Custom Reports</h3><div class="code-example">Marketing Performance Dashboard:\n\n1. Traffic Overview\n   - Total sessions by source\n   - New vs. returning users\n   - Mobile vs. desktop traffic\n\n2. Conversion Funnel\n   - Homepage views\n   - Product page views\n   - Cart additions\n   - Purchases completed\n\n3. Campaign Performance\n   - Cost per click by campaign\n   - Conversion rate by source\n   - Return on ad spend</div><h3>Data-Driven Optimization</h3><p>• Set up conversion tracking<br>• Use UTM parameters for campaign tracking<br>• Implement Google Tag Manager<br>• Create automated reports<br>• A/B testing implementation</p><h3>Marketing Attribution</h3><p>• First-click attribution<br>• Last-click attribution<br>• Multi-touch attribution<br>• Time-decay models</p><div class="exercise"><h4>Practice Exercise</h4><p>Set up a complete analytics tracking system for an e-commerce website and create a performance dashboard.</p></div>', 6);